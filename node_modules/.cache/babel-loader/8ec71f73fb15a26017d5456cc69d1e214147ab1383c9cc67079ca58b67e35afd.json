{"ast":null,"code":"var _regeneratorRuntime = require(\"/project/remora/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/project/remora/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/project/remora/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/project/remora/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/project/remora/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/project/remora/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require('apify-shared/consts'),\n  ACT_JOB_TERMINAL_STATUSES = _require.ACT_JOB_TERMINAL_STATUSES;\nvar ApiClient = require('./api_client');\nvar _require2 = require('../utils'),\n  pluckData = _require2.pluckData,\n  parseDateFields = _require2.parseDateFields,\n  catchNotFoundOrThrow = _require2.catchNotFoundOrThrow;\n\n/**\n * Resource client.\n *\n * @param {ApiClientOptions} options\n * @private\n */\nvar ResourceClient = /*#__PURE__*/function (_ApiClient) {\n  \"use strict\";\n\n  _inherits(ResourceClient, _ApiClient);\n  var _super = _createSuper(ResourceClient);\n  function ResourceClient() {\n    _classCallCheck(this, ResourceClient);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ResourceClient, [{\n    key: \"_get\",\n    value:\n    /**\n     * @param {object} [options]\n     * @return {Promise<?object>}\n     * @private\n     */\n    function () {\n      var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n          requestOpts,\n          response,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              requestOpts = {\n                url: this._url(),\n                method: 'GET',\n                params: this._params(options)\n              };\n              _context.prev = 2;\n              _context.next = 5;\n              return this.httpClient.call(requestOpts);\n            case 5:\n              response = _context.sent;\n              return _context.abrupt(\"return\", parseDateFields(pluckData(response.data)));\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              return _context.abrupt(\"return\", catchNotFoundOrThrow(_context.t0));\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n      function _get() {\n        return _get2.apply(this, arguments);\n      }\n      return _get;\n    }()\n    /**\n     * @return {Promise<object>}\n     * @private\n     */\n  }, {\n    key: \"_update\",\n    value: function () {\n      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(newFields) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.httpClient.call({\n                url: this._url(),\n                method: 'PUT',\n                params: this._params(),\n                data: newFields\n              });\n            case 2:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", parseDateFields(pluckData(response.data)));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _update(_x) {\n        return _update2.apply(this, arguments);\n      }\n      return _update;\n    }()\n    /**\n     * @return {Promise<void>}\n     * @private\n     */\n  }, {\n    key: \"_delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return this.httpClient.call({\n                url: this._url(),\n                method: 'DELETE',\n                params: this._params()\n              });\n            case 3:\n              _context3.next = 8;\n              break;\n            case 5:\n              _context3.prev = 5;\n              _context3.t0 = _context3[\"catch\"](0);\n              return _context3.abrupt(\"return\", catchNotFoundOrThrow(_context3.t0));\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * This function is used in Build and Run endpoints so it's kept\n     * here to stay DRY.\n     *\n     * @param {object} [options]\n     * @param {number} [options.waitSecs]\n     * @returns {Promise<object>}\n     * @private\n     */\n  }, {\n    key: \"_waitForFinish\",\n    value: function () {\n      var _waitForFinish2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var options,\n          waitSecs,\n          job,\n          startedAt,\n          shouldRepeat,\n          waitForFinish,\n          requestOpts,\n          response,\n          jobName,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n              waitSecs = options.waitSecs;\n              startedAt = Date.now();\n              shouldRepeat = function shouldRepeat() {\n                if (waitSecs && (Date.now() - startedAt) / 1000 >= waitSecs) return false;\n                if (job && ACT_JOB_TERMINAL_STATUSES.includes(job.status)) return false;\n                return true;\n              };\n            case 4:\n              if (!shouldRepeat()) {\n                _context4.next = 22;\n                break;\n              }\n              waitForFinish = waitSecs ? Math.round(waitSecs - (Date.now() - startedAt) / 1000) : 999999;\n              requestOpts = {\n                url: this._url(),\n                method: 'GET',\n                params: this._params({\n                  waitForFinish: waitForFinish\n                })\n              };\n              _context4.prev = 7;\n              _context4.next = 10;\n              return this.httpClient.call(requestOpts);\n            case 10:\n              response = _context4.sent;\n              job = parseDateFields(pluckData(response.data));\n              _context4.next = 17;\n              break;\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](7);\n              job = catchNotFoundOrThrow(_context4.t0);\n            case 17:\n              if (job) {\n                _context4.next = 20;\n                break;\n              }\n              _context4.next = 20;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 250);\n              });\n            case 20:\n              _context4.next = 4;\n              break;\n            case 22:\n              if (job) {\n                _context4.next = 25;\n                break;\n              }\n              jobName = this.constructor.name.match(/(\\w+)Client/)[1].toLowerCase();\n              throw new Error(\"Waiting for \".concat(jobName, \" to finish failed. Cannot fetch actor \").concat(jobName, \" details from the server.\"));\n            case 25:\n              return _context4.abrupt(\"return\", job);\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[7, 14]]);\n      }));\n      function _waitForFinish() {\n        return _waitForFinish2.apply(this, arguments);\n      }\n      return _waitForFinish;\n    }()\n  }]);\n  return ResourceClient;\n}(ApiClient);\nmodule.exports = ResourceClient;","map":{"version":3,"names":["_require","require","ACT_JOB_TERMINAL_STATUSES","ApiClient","_require2","pluckData","parseDateFields","catchNotFoundOrThrow","ResourceClient","_ApiClient","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_get2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","requestOpts","response","_args","wrap","_callee$","_context","prev","next","length","undefined","url","_url","method","params","_params","httpClient","call","sent","abrupt","data","t0","stop","_get","_update2","_callee2","newFields","_callee2$","_context2","_update","_x","_delete2","_callee3","_callee3$","_context3","_delete","_waitForFinish2","_callee4","waitSecs","job","startedAt","shouldRepeat","waitForFinish","jobName","_args4","_callee4$","_context4","Date","now","includes","status","Math","round","Promise","resolve","setTimeout","constructor","name","match","toLowerCase","Error","concat","_waitForFinish","module","exports"],"sources":["/project/remora/node_modules/apify-client/src/base/resource_client.js"],"sourcesContent":["const { ACT_JOB_TERMINAL_STATUSES } = require('apify-shared/consts');\nconst ApiClient = require('./api_client');\nconst {\n    pluckData,\n    parseDateFields,\n    catchNotFoundOrThrow,\n} = require('../utils');\n\n/**\n * Resource client.\n *\n * @param {ApiClientOptions} options\n * @private\n */\nclass ResourceClient extends ApiClient {\n    /**\n     * @param {object} [options]\n     * @return {Promise<?object>}\n     * @private\n     */\n    async _get(options = {}) {\n        const requestOpts = {\n            url: this._url(),\n            method: 'GET',\n            params: this._params(options),\n        };\n        try {\n            const response = await this.httpClient.call(requestOpts);\n            return parseDateFields(pluckData(response.data));\n        } catch (err) {\n            return catchNotFoundOrThrow(err);\n        }\n    }\n\n    /**\n     * @return {Promise<object>}\n     * @private\n     */\n    async _update(newFields) {\n        const response = await this.httpClient.call({\n            url: this._url(),\n            method: 'PUT',\n            params: this._params(),\n            data: newFields,\n        });\n        return parseDateFields(pluckData(response.data));\n    }\n\n    /**\n     * @return {Promise<void>}\n     * @private\n     */\n    async _delete() {\n        try {\n            await this.httpClient.call({\n                url: this._url(),\n                method: 'DELETE',\n                params: this._params(),\n            });\n        } catch (err) {\n            return catchNotFoundOrThrow(err);\n        }\n    }\n\n    /**\n     * This function is used in Build and Run endpoints so it's kept\n     * here to stay DRY.\n     *\n     * @param {object} [options]\n     * @param {number} [options.waitSecs]\n     * @returns {Promise<object>}\n     * @private\n     */\n    async _waitForFinish(options = {}) {\n        const { waitSecs } = options;\n        let job;\n\n        const startedAt = Date.now();\n        const shouldRepeat = () => {\n            if (waitSecs && (Date.now() - startedAt) / 1000 >= waitSecs) return false;\n            if (job && ACT_JOB_TERMINAL_STATUSES.includes(job.status)) return false;\n            return true;\n        };\n\n        while (shouldRepeat()) {\n            const waitForFinish = waitSecs\n                ? Math.round(waitSecs - ((Date.now() - startedAt) / 1000))\n                : 999999;\n\n            const requestOpts = {\n                url: this._url(),\n                method: 'GET',\n                params: this._params({ waitForFinish }),\n            };\n            try {\n                const response = await this.httpClient.call(requestOpts);\n                job = parseDateFields(pluckData(response.data));\n            } catch (err) {\n                job = catchNotFoundOrThrow(err);\n            }\n\n            // It might take some time for database replicas to get up-to-date,\n            // so getRun() might return null. Wait a little bit and try it again.\n            if (!job) await new Promise((resolve) => setTimeout(resolve, 250));\n        }\n\n        if (!job) {\n            const jobName = this.constructor.name.match(/(\\w+)Client/)[1].toLowerCase();\n            throw new Error(`Waiting for ${jobName} to finish failed. Cannot fetch actor ${jobName} details from the server.`);\n        }\n\n        return job;\n    }\n}\n\nmodule.exports = ResourceClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}