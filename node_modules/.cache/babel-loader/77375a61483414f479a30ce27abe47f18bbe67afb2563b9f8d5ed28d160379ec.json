{"ast":null,"code":"var _regeneratorRuntime = require(\"/project/remora/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/project/remora/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"/project/remora/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/project/remora/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/project/remora/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/project/remora/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/project/remora/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar ow = require('ow').default;\nvar ResourceClient = require('../base/resource_client');\nvar _require = require('../utils'),\n  isBuffer = _require.isBuffer,\n  isStream = _require.isStream;\nvar _require2 = require('../utils'),\n  pluckData = _require2.pluckData,\n  parseDateFields = _require2.parseDateFields,\n  catchNotFoundOrThrow = _require2.catchNotFoundOrThrow,\n  isNode = _require2.isNode,\n  maybeGzipValue = _require2.maybeGzipValue;\nvar SIGNED_URL_UPLOAD_MIN_BYTES = 1024 * 256;\n\n/**\n * @hideconstructor\n */\nvar KeyValueStoreClient = /*#__PURE__*/function (_ResourceClient) {\n  \"use strict\";\n\n  _inherits(KeyValueStoreClient, _ResourceClient);\n  var _super = _createSuper(KeyValueStoreClient);\n  /**\n   * @param {ApiClientOptions} options\n   */\n  function KeyValueStoreClient(options) {\n    _classCallCheck(this, KeyValueStoreClient);\n    return _super.call(this, _objectSpread({\n      resourcePath: 'key-value-stores'\n    }, options));\n  }\n\n  /**\n   * https://docs.apify.com/api/v2#/reference/key-value-stores/store-object/get-store\n   * @return {Promise<KeyValueStore>}\n   */\n  _createClass(KeyValueStoreClient, [{\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._get());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function get() {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/store-object/update-store\n     * @param {object} newFields\n     * @return {Promise<KeyValueStore>}\n     */\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(newFields) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              ow(newFields, ow.object);\n              return _context2.abrupt(\"return\", this._update(newFields));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/store-object/delete-store\n     * @return {Promise<void>}\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this._delete());\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/key-collection/get-list-of-keys\n     * @param {object} [options]\n     * @param {object} [options.limit]\n     * @param {string} [options.exclusiveStartKey]\n     * @return {Promise<object>}\n     */\n  }, {\n    key: \"listKeys\",\n    value: function () {\n      var _listKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var options,\n          response,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n              ow(options, ow.object.exactShape({\n                limit: ow.optional.number,\n                exclusiveStartKey: ow.optional.string\n              }));\n              _context4.next = 4;\n              return this.httpClient.call({\n                url: this._url('keys'),\n                method: 'GET',\n                params: this._params(options)\n              });\n            case 4:\n              response = _context4.sent;\n              return _context4.abrupt(\"return\", parseDateFields(pluckData(response.data)));\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function listKeys() {\n        return _listKeys.apply(this, arguments);\n      }\n      return listKeys;\n    }()\n    /**\n     * You can use the `buffer` option to get the value in a Buffer (Node.js)\n     * or ArrayBuffer (browser) format. In Node.js (not in browser) you can also\n     * use the `stream` option to get a Readable stream.\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/record/get-record\n     * @param {string} key\n     * @param {object} [options]\n     * @param {boolean} [options.buffer]\n     * @param {boolean} [options.stream]\n     * @param {boolean} [options.disableRedirect]\n     * @return {Promise<KeyValueStoreRecord>}\n     */\n  }, {\n    key: \"getRecord\",\n    value: function () {\n      var _getRecord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(key) {\n        var options,\n          params,\n          requestOpts,\n          response,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n              ow(key, ow.string);\n              ow(options, ow.object.exactShape({\n                buffer: ow.optional.boolean,\n                stream: ow.optional.boolean,\n                disableRedirect: ow.optional.boolean\n              }));\n              if (!(options.stream && !isNode())) {\n                _context5.next = 5;\n                break;\n              }\n              throw new Error('The stream option can only be used in Node.js environment.');\n            case 5:\n              params = {\n                disableRedirect: options.disableRedirect\n              };\n              requestOpts = {\n                url: this._url(\"records/\".concat(key)),\n                method: 'GET',\n                params: this._params(params)\n              };\n              if (options.buffer) requestOpts.forceBuffer = true;\n              if (options.stream) requestOpts.responseType = 'stream';\n              _context5.prev = 9;\n              _context5.next = 12;\n              return this.httpClient.call(requestOpts);\n            case 12:\n              response = _context5.sent;\n              return _context5.abrupt(\"return\", {\n                key: key,\n                value: response.data,\n                contentType: response.headers['content-type']\n              });\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](9);\n              return _context5.abrupt(\"return\", catchNotFoundOrThrow(_context5.t0));\n            case 19:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[9, 16]]);\n      }));\n      function getRecord(_x2) {\n        return _getRecord.apply(this, arguments);\n      }\n      return getRecord;\n    }()\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/record/put-record\n     * @param {KeyValueStoreRecord} record\n     * @return {Promise<void>}\n     */\n  }, {\n    key: \"setRecord\",\n    value: function () {\n      var _setRecord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(record) {\n        var key, value, contentType, isValueStreamOrBuffer, isContentTypeJson, msg, headers, maybeZippedValue, shouldUseDirectUpload, uploadOpts;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              ow(record, ow.object.exactShape({\n                key: ow.string,\n                value: ow.any(ow.null, ow.string, ow.number, ow.object),\n                contentType: ow.optional.string.nonEmpty\n              }));\n              key = record.key;\n              value = record.value, contentType = record.contentType;\n              isValueStreamOrBuffer = isStream(value) || isBuffer(value); // To allow saving Objects to JSON without providing content type\n              if (!contentType) {\n                if (isValueStreamOrBuffer) contentType = 'application/octet-stream';else if (typeof value === 'string') contentType = 'text/plain; charset=utf-8';else contentType = 'application/json; charset=utf-8';\n              }\n              isContentTypeJson = /^application\\/json/.test(contentType);\n              if (!(isContentTypeJson && !isValueStreamOrBuffer && typeof value !== 'string')) {\n                _context6.next = 15;\n                break;\n              }\n              _context6.prev = 7;\n              value = JSON.stringify(value, null, 2);\n              _context6.next = 15;\n              break;\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](7);\n              msg = \"The record value cannot be stringified to JSON. Please provide other content type.\\nCause: \".concat(_context6.t0.message);\n              throw new Error(msg);\n            case 15:\n              // All this mess is because of signed upload URL. It needs to:\n              // 1) have the same CType and CEncoding headers as the upload request itself.\n              // 2) we measure the upload size after GZIP, so we have to GZIP here, not in interceptor\n              // 3) we have to tell the interceptor to not GZIP again by setting the CEncoding\n              headers = {};\n              if (contentType) headers['content-type'] = contentType;\n              _context6.next = 19;\n              return maybeGzipValue(value);\n            case 19:\n              maybeZippedValue = _context6.sent;\n              if (maybeZippedValue !== value) {\n                // This means we zipped the value and we need to add encoding\n                headers['content-encoding'] = 'gzip';\n              }\n              // No need to keep original large value in memory\n              value = maybeZippedValue;\n              shouldUseDirectUpload = this._shouldUseDirectUpload(value);\n              if (!shouldUseDirectUpload) {\n                _context6.next = 29;\n                break;\n              }\n              _context6.next = 26;\n              return this._getSignedUploadUrl(key, headers);\n            case 26:\n              _context6.t1 = _context6.sent;\n              _context6.next = 30;\n              break;\n            case 29:\n              _context6.t1 = this._url(\"records/\".concat(key));\n            case 30:\n              _context6.t2 = _context6.t1;\n              _context6.t3 = shouldUseDirectUpload ? null : this._params();\n              _context6.t4 = value;\n              _context6.t5 = headers;\n              uploadOpts = {\n                url: _context6.t2,\n                method: 'PUT',\n                params: _context6.t3,\n                data: _context6.t4,\n                headers: _context6.t5\n              };\n              _context6.next = 37;\n              return this.httpClient.call(uploadOpts);\n            case 37:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[7, 11]]);\n      }));\n      function setRecord(_x3) {\n        return _setRecord.apply(this, arguments);\n      }\n      return setRecord;\n    }()\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/record/delete-record\n     * @param {string} key\n     * @return {Promise<void>}\n     */\n  }, {\n    key: \"deleteRecord\",\n    value: function () {\n      var _deleteRecord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              ow(key, ow.string);\n              _context7.next = 3;\n              return this.httpClient.call({\n                url: this._url(\"records/\".concat(key)),\n                method: 'DELETE',\n                params: this._params()\n              });\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function deleteRecord(_x4) {\n        return _deleteRecord.apply(this, arguments);\n      }\n      return deleteRecord;\n    }()\n    /**\n     * @param {string|Buffer|stream.Readable} value\n     * @return {boolean}\n     * @private\n     */\n  }, {\n    key: \"_shouldUseDirectUpload\",\n    value: function _shouldUseDirectUpload(value) {\n      var bytes = -1;\n      if (typeof value === 'string') {\n        // We could encode this to measure precisely,\n        // but it's not worth the extra computation.\n        bytes = value.length;\n      }\n      if (isBuffer(value)) {\n        bytes = value.byteLength;\n      }\n      if (isStream(value)) {\n        // Streams can't be counted but let's assume it's big.\n        bytes = Infinity;\n      }\n      return bytes >= SIGNED_URL_UPLOAD_MIN_BYTES;\n    }\n\n    /**\n     * @param {string} key\n     * @param {object} headers\n     * @return {Promise<string>}\n     * @private\n     */\n  }, {\n    key: \"_getSignedUploadUrl\",\n    value: function () {\n      var _getSignedUploadUrl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(key, headers) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.httpClient.call({\n                url: this._url(\"records/\".concat(key, \"/direct-upload-url\")),\n                params: this._params(),\n                method: 'GET',\n                headers: headers\n              });\n            case 2:\n              response = _context8.sent;\n              return _context8.abrupt(\"return\", response.data.data.signedUrl);\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function _getSignedUploadUrl(_x5, _x6) {\n        return _getSignedUploadUrl2.apply(this, arguments);\n      }\n      return _getSignedUploadUrl;\n    }()\n  }]);\n  return KeyValueStoreClient;\n}(ResourceClient);\nmodule.exports = KeyValueStoreClient;\n\n/**\n * @typedef {object} KeyValueStoreRecord\n * @property {string} key\n * @property {null|string|number|object} value\n * @property {string} [contentType]\n */","map":{"version":3,"names":["ow","require","default","ResourceClient","_require","isBuffer","isStream","_require2","pluckData","parseDateFields","catchNotFoundOrThrow","isNode","maybeGzipValue","SIGNED_URL_UPLOAD_MIN_BYTES","KeyValueStoreClient","_ResourceClient","_inherits","_super","_createSuper","options","_classCallCheck","call","_objectSpread","resourcePath","_createClass","key","value","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","get","apply","arguments","_update","_callee2","newFields","_callee2$","_context2","object","update","_x","_delete2","_callee3","_callee3$","_context3","_delete","_listKeys","_callee4","response","_args4","_callee4$","_context4","length","undefined","exactShape","limit","optional","number","exclusiveStartKey","string","httpClient","url","_url","method","params","_params","sent","data","listKeys","_getRecord","_callee5","requestOpts","_args5","_callee5$","_context5","buffer","boolean","stream","disableRedirect","Error","concat","forceBuffer","responseType","contentType","headers","t0","getRecord","_x2","_setRecord","_callee6","record","isValueStreamOrBuffer","isContentTypeJson","msg","maybeZippedValue","shouldUseDirectUpload","uploadOpts","_callee6$","_context6","any","null","nonEmpty","test","JSON","stringify","message","_shouldUseDirectUpload","_getSignedUploadUrl","t1","t2","t3","t4","t5","setRecord","_x3","_deleteRecord","_callee7","_callee7$","_context7","deleteRecord","_x4","bytes","byteLength","Infinity","_getSignedUploadUrl2","_callee8","_callee8$","_context8","signedUrl","_x5","_x6","module","exports"],"sources":["/project/remora/node_modules/apify-client/src/resource_clients/key_value_store.js"],"sourcesContent":["const ow = require('ow').default;\nconst ResourceClient = require('../base/resource_client');\nconst { isBuffer, isStream } = require('../utils');\nconst {\n    pluckData,\n    parseDateFields,\n    catchNotFoundOrThrow,\n    isNode,\n    maybeGzipValue,\n} = require('../utils');\n\nconst SIGNED_URL_UPLOAD_MIN_BYTES = 1024 * 256;\n\n/**\n * @hideconstructor\n */\nclass KeyValueStoreClient extends ResourceClient {\n    /**\n     * @param {ApiClientOptions} options\n     */\n    constructor(options) {\n        super({\n            resourcePath: 'key-value-stores',\n            ...options,\n        });\n    }\n\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/store-object/get-store\n     * @return {Promise<KeyValueStore>}\n     */\n    async get() {\n        return this._get();\n    }\n\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/store-object/update-store\n     * @param {object} newFields\n     * @return {Promise<KeyValueStore>}\n     */\n    async update(newFields) {\n        ow(newFields, ow.object);\n        return this._update(newFields);\n    }\n\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/store-object/delete-store\n     * @return {Promise<void>}\n     */\n    async delete() {\n        return this._delete();\n    }\n\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/key-collection/get-list-of-keys\n     * @param {object} [options]\n     * @param {object} [options.limit]\n     * @param {string} [options.exclusiveStartKey]\n     * @return {Promise<object>}\n     */\n    async listKeys(options = {}) {\n        ow(options, ow.object.exactShape({\n            limit: ow.optional.number,\n            exclusiveStartKey: ow.optional.string,\n        }));\n        const response = await this.httpClient.call({\n            url: this._url('keys'),\n            method: 'GET',\n            params: this._params(options),\n        });\n        return parseDateFields(pluckData(response.data));\n    }\n\n    /**\n     * You can use the `buffer` option to get the value in a Buffer (Node.js)\n     * or ArrayBuffer (browser) format. In Node.js (not in browser) you can also\n     * use the `stream` option to get a Readable stream.\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/record/get-record\n     * @param {string} key\n     * @param {object} [options]\n     * @param {boolean} [options.buffer]\n     * @param {boolean} [options.stream]\n     * @param {boolean} [options.disableRedirect]\n     * @return {Promise<KeyValueStoreRecord>}\n     */\n    async getRecord(key, options = {}) {\n        ow(key, ow.string);\n        ow(options, ow.object.exactShape({\n            buffer: ow.optional.boolean,\n            stream: ow.optional.boolean,\n            disableRedirect: ow.optional.boolean,\n        }));\n        if (options.stream && !isNode()) {\n            throw new Error('The stream option can only be used in Node.js environment.');\n        }\n\n        const params = {\n            disableRedirect: options.disableRedirect,\n        };\n\n        const requestOpts = {\n            url: this._url(`records/${key}`),\n            method: 'GET',\n            params: this._params(params),\n        };\n\n        if (options.buffer) requestOpts.forceBuffer = true;\n        if (options.stream) requestOpts.responseType = 'stream';\n\n        try {\n            const response = await this.httpClient.call(requestOpts);\n            return {\n                key,\n                value: response.data,\n                contentType: response.headers['content-type'],\n            };\n        } catch (err) {\n            return catchNotFoundOrThrow(err);\n        }\n    }\n\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/record/put-record\n     * @param {KeyValueStoreRecord} record\n     * @return {Promise<void>}\n     */\n    async setRecord(record) {\n        ow(record, ow.object.exactShape({\n            key: ow.string,\n            value: ow.any(ow.null, ow.string, ow.number, ow.object),\n            contentType: ow.optional.string.nonEmpty,\n        }));\n\n        const { key } = record;\n        let { value, contentType } = record;\n\n        const isValueStreamOrBuffer = isStream(value) || isBuffer(value);\n        // To allow saving Objects to JSON without providing content type\n        if (!contentType) {\n            if (isValueStreamOrBuffer) contentType = 'application/octet-stream';\n            else if (typeof value === 'string') contentType = 'text/plain; charset=utf-8';\n            else contentType = 'application/json; charset=utf-8';\n        }\n\n        const isContentTypeJson = /^application\\/json/.test(contentType);\n        if (isContentTypeJson && !isValueStreamOrBuffer && typeof value !== 'string') {\n            try {\n                value = JSON.stringify(value, null, 2);\n            } catch (err) {\n                const msg = `The record value cannot be stringified to JSON. Please provide other content type.\\nCause: ${err.message}`;\n                throw new Error(msg);\n            }\n        }\n\n        // All this mess is because of signed upload URL. It needs to:\n        // 1) have the same CType and CEncoding headers as the upload request itself.\n        // 2) we measure the upload size after GZIP, so we have to GZIP here, not in interceptor\n        // 3) we have to tell the interceptor to not GZIP again by setting the CEncoding\n        const headers = {};\n        if (contentType) headers['content-type'] = contentType;\n\n        const maybeZippedValue = await maybeGzipValue(value);\n        if (maybeZippedValue !== value) {\n            // This means we zipped the value and we need to add encoding\n            headers['content-encoding'] = 'gzip';\n        }\n        // No need to keep original large value in memory\n        value = maybeZippedValue;\n\n        const shouldUseDirectUpload = this._shouldUseDirectUpload(value);\n\n        const uploadOpts = {\n            url: shouldUseDirectUpload\n                ? await this._getSignedUploadUrl(key, headers)\n                : this._url(`records/${key}`),\n            method: 'PUT',\n            params: shouldUseDirectUpload ? null : this._params(),\n            data: value,\n            headers,\n        };\n\n        await this.httpClient.call(uploadOpts);\n    }\n\n    /**\n     * https://docs.apify.com/api/v2#/reference/key-value-stores/record/delete-record\n     * @param {string} key\n     * @return {Promise<void>}\n     */\n    async deleteRecord(key) {\n        ow(key, ow.string);\n\n        await this.httpClient.call({\n            url: this._url(`records/${key}`),\n            method: 'DELETE',\n            params: this._params(),\n        });\n    }\n\n    /**\n     * @param {string|Buffer|stream.Readable} value\n     * @return {boolean}\n     * @private\n     */\n    _shouldUseDirectUpload(value) {\n        let bytes = -1;\n        if (typeof value === 'string') {\n            // We could encode this to measure precisely,\n            // but it's not worth the extra computation.\n            bytes = value.length;\n        }\n        if (isBuffer(value)) {\n            bytes = value.byteLength;\n        }\n        if (isStream(value)) {\n            // Streams can't be counted but let's assume it's big.\n            bytes = Infinity;\n        }\n        return bytes >= SIGNED_URL_UPLOAD_MIN_BYTES;\n    }\n\n    /**\n     * @param {string} key\n     * @param {object} headers\n     * @return {Promise<string>}\n     * @private\n     */\n    async _getSignedUploadUrl(key, headers) {\n        const response = await this.httpClient.call({\n            url: this._url(`records/${key}/direct-upload-url`),\n            params: this._params(),\n            method: 'GET',\n            headers,\n        });\n        // The response looks like this: { data: { signedUrl: \"url\" }}\n        // The double 'data' is NOT a typo! First data are from AxiosResponse\n        return response.data.data.signedUrl;\n    }\n}\n\nmodule.exports = KeyValueStoreClient;\n\n/**\n * @typedef {object} KeyValueStoreRecord\n * @property {string} key\n * @property {null|string|number|object} value\n * @property {string} [contentType]\n */\n"],"mappings":";;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC,CAACC,OAAO;AAChC,IAAMC,cAAc,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACzD,IAAAG,QAAA,GAA+BH,OAAO,CAAC,UAAU,CAAC;EAA1CI,QAAQ,GAAAD,QAAA,CAARC,QAAQ;EAAEC,QAAQ,GAAAF,QAAA,CAARE,QAAQ;AAC1B,IAAAC,SAAA,GAMIN,OAAO,CAAC,UAAU,CAAC;EALnBO,SAAS,GAAAD,SAAA,CAATC,SAAS;EACTC,eAAe,GAAAF,SAAA,CAAfE,eAAe;EACfC,oBAAoB,GAAAH,SAAA,CAApBG,oBAAoB;EACpBC,MAAM,GAAAJ,SAAA,CAANI,MAAM;EACNC,cAAc,GAAAL,SAAA,CAAdK,cAAc;AAGlB,IAAMC,2BAA2B,GAAG,IAAI,GAAG,GAAG;;AAE9C;AACA;AACA;AAFA,IAGMC,mBAAmB,0BAAAC,eAAA;EAAA;;EAAAC,SAAA,CAAAF,mBAAA,EAAAC,eAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,mBAAA;EACrB;AACJ;AACA;EACI,SAAAA,oBAAYK,OAAO,EAAE;IAAAC,eAAA,OAAAN,mBAAA;IAAA,OAAAG,MAAA,CAAAI,IAAA,OAAAC,aAAA;MAEbC,YAAY,EAAE;IAAkB,GAC7BJ,OAAO;EAElB;;EAEA;AACJ;AACA;AACA;EAHIK,YAAA,CAAAV,mBAAA;IAAAW,GAAA;IAAAC,KAAA;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAIA,SAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA,WACW,IAAI,CAACV,IAAI,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAO,QAAA,CAAAI,IAAA;UAAA;QAAA,GAAAP,OAAA;MAAA,CACrB;MAAA,SAAAQ,IAAA;QAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAF,GAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;EAJI;IAAAd,GAAA;IAAAC,KAAA;MAAA,IAAAgB,OAAA,GAAAd,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAKA,SAAAa,SAAaC,SAAS;QAAA,OAAAf,mBAAA,GAAAG,IAAA,UAAAa,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAX,IAAA,GAAAW,SAAA,CAAAV,IAAA;YAAA;cAClBpC,EAAE,CAAC4C,SAAS,EAAE5C,EAAE,CAAC+C,MAAM,CAAC;cAAC,OAAAD,SAAA,CAAAT,MAAA,WAClB,IAAI,CAACK,OAAO,CAACE,SAAS,CAAC;YAAA;YAAA;cAAA,OAAAE,SAAA,CAAAR,IAAA;UAAA;QAAA,GAAAK,QAAA;MAAA,CACjC;MAAA,SAAAK,OAAAC,EAAA;QAAA,OAAAP,OAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAO,MAAA;IAAA;IAED;AACJ;AACA;AACA;EAHI;IAAAvB,GAAA;IAAAC,KAAA;MAAA,IAAAwB,QAAA,GAAAtB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAIA,SAAAqB,SAAA;QAAA,OAAAtB,mBAAA,GAAAG,IAAA,UAAAoB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAlB,IAAA,GAAAkB,SAAA,CAAAjB,IAAA;YAAA;cAAA,OAAAiB,SAAA,CAAAhB,MAAA,WACW,IAAI,CAACiB,OAAO,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAD,SAAA,CAAAf,IAAA;UAAA;QAAA,GAAAa,QAAA;MAAA,CACxB;MAAA,SAAAG,QAAA;QAAA,OAAAJ,QAAA,CAAAV,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAa,OAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA7B,GAAA;IAAAC,KAAA;MAAA,IAAA6B,SAAA,GAAA3B,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAOA,SAAA0B,SAAA;QAAA,IAAArC,OAAA;UAAAsC,QAAA;UAAAC,MAAA,GAAAjB,SAAA;QAAA,OAAAZ,mBAAA,GAAAG,IAAA,UAAA2B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzB,IAAA,GAAAyB,SAAA,CAAAxB,IAAA;YAAA;cAAejB,OAAO,GAAAuC,MAAA,CAAAG,MAAA,QAAAH,MAAA,QAAAI,SAAA,GAAAJ,MAAA,MAAG,CAAC,CAAC;cACvB1D,EAAE,CAACmB,OAAO,EAAEnB,EAAE,CAAC+C,MAAM,CAACgB,UAAU,CAAC;gBAC7BC,KAAK,EAAEhE,EAAE,CAACiE,QAAQ,CAACC,MAAM;gBACzBC,iBAAiB,EAAEnE,EAAE,CAACiE,QAAQ,CAACG;cACnC,CAAC,CAAC,CAAC;cAACR,SAAA,CAAAxB,IAAA;cAAA,OACmB,IAAI,CAACiC,UAAU,CAAChD,IAAI,CAAC;gBACxCiD,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC,MAAM,CAAC;gBACtBC,MAAM,EAAE,KAAK;gBACbC,MAAM,EAAE,IAAI,CAACC,OAAO,CAACvD,OAAO;cAChC,CAAC,CAAC;YAAA;cAJIsC,QAAQ,GAAAG,SAAA,CAAAe,IAAA;cAAA,OAAAf,SAAA,CAAAvB,MAAA,WAKP5B,eAAe,CAACD,SAAS,CAACiD,QAAQ,CAACmB,IAAI,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAhB,SAAA,CAAAtB,IAAA;UAAA;QAAA,GAAAkB,QAAA;MAAA,CACnD;MAAA,SAAAqB,SAAA;QAAA,OAAAtB,SAAA,CAAAf,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAoC,QAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAXI;IAAApD,GAAA;IAAAC,KAAA;MAAA,IAAAoD,UAAA,GAAAlD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAYA,SAAAiD,SAAgBtD,GAAG;QAAA,IAAAN,OAAA;UAAAsD,MAAA;UAAAO,WAAA;UAAAvB,QAAA;UAAAwB,MAAA,GAAAxC,SAAA;QAAA,OAAAZ,mBAAA,GAAAG,IAAA,UAAAkD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAhD,IAAA,GAAAgD,SAAA,CAAA/C,IAAA;YAAA;cAAEjB,OAAO,GAAA8D,MAAA,CAAApB,MAAA,QAAAoB,MAAA,QAAAnB,SAAA,GAAAmB,MAAA,MAAG,CAAC,CAAC;cAC7BjF,EAAE,CAACyB,GAAG,EAAEzB,EAAE,CAACoE,MAAM,CAAC;cAClBpE,EAAE,CAACmB,OAAO,EAAEnB,EAAE,CAAC+C,MAAM,CAACgB,UAAU,CAAC;gBAC7BqB,MAAM,EAAEpF,EAAE,CAACiE,QAAQ,CAACoB,OAAO;gBAC3BC,MAAM,EAAEtF,EAAE,CAACiE,QAAQ,CAACoB,OAAO;gBAC3BE,eAAe,EAAEvF,EAAE,CAACiE,QAAQ,CAACoB;cACjC,CAAC,CAAC,CAAC;cAAC,MACAlE,OAAO,CAACmE,MAAM,IAAI,CAAC3E,MAAM,CAAC,CAAC;gBAAAwE,SAAA,CAAA/C,IAAA;gBAAA;cAAA;cAAA,MACrB,IAAIoD,KAAK,CAAC,4DAA4D,CAAC;YAAA;cAG3Ef,MAAM,GAAG;gBACXc,eAAe,EAAEpE,OAAO,CAACoE;cAC7B,CAAC;cAEKP,WAAW,GAAG;gBAChBV,GAAG,EAAE,IAAI,CAACC,IAAI,YAAAkB,MAAA,CAAYhE,GAAG,CAAE,CAAC;gBAChC+C,MAAM,EAAE,KAAK;gBACbC,MAAM,EAAE,IAAI,CAACC,OAAO,CAACD,MAAM;cAC/B,CAAC;cAED,IAAItD,OAAO,CAACiE,MAAM,EAAEJ,WAAW,CAACU,WAAW,GAAG,IAAI;cAClD,IAAIvE,OAAO,CAACmE,MAAM,EAAEN,WAAW,CAACW,YAAY,GAAG,QAAQ;cAACR,SAAA,CAAAhD,IAAA;cAAAgD,SAAA,CAAA/C,IAAA;cAAA,OAG7B,IAAI,CAACiC,UAAU,CAAChD,IAAI,CAAC2D,WAAW,CAAC;YAAA;cAAlDvB,QAAQ,GAAA0B,SAAA,CAAAR,IAAA;cAAA,OAAAQ,SAAA,CAAA9C,MAAA,WACP;gBACHZ,GAAG,EAAHA,GAAG;gBACHC,KAAK,EAAE+B,QAAQ,CAACmB,IAAI;gBACpBgB,WAAW,EAAEnC,QAAQ,CAACoC,OAAO,CAAC,cAAc;cAChD,CAAC;YAAA;cAAAV,SAAA,CAAAhD,IAAA;cAAAgD,SAAA,CAAAW,EAAA,GAAAX,SAAA;cAAA,OAAAA,SAAA,CAAA9C,MAAA,WAEM3B,oBAAoB,CAAAyE,SAAA,CAAAW,EAAI,CAAC;YAAA;YAAA;cAAA,OAAAX,SAAA,CAAA7C,IAAA;UAAA;QAAA,GAAAyC,QAAA;MAAA,CAEvC;MAAA,SAAAgB,UAAAC,GAAA;QAAA,OAAAlB,UAAA,CAAAtC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAsD,SAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;EAJI;IAAAtE,GAAA;IAAAC,KAAA;MAAA,IAAAuE,UAAA,GAAArE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAKA,SAAAoE,SAAgBC,MAAM;QAAA,IAAA1E,GAAA,EAAAC,KAAA,EAAAkE,WAAA,EAAAQ,qBAAA,EAAAC,iBAAA,EAAAC,GAAA,EAAAT,OAAA,EAAAU,gBAAA,EAAAC,qBAAA,EAAAC,UAAA;QAAA,OAAA5E,mBAAA,GAAAG,IAAA,UAAA0E,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAxE,IAAA,GAAAwE,SAAA,CAAAvE,IAAA;YAAA;cAClBpC,EAAE,CAACmG,MAAM,EAAEnG,EAAE,CAAC+C,MAAM,CAACgB,UAAU,CAAC;gBAC5BtC,GAAG,EAAEzB,EAAE,CAACoE,MAAM;gBACd1C,KAAK,EAAE1B,EAAE,CAAC4G,GAAG,CAAC5G,EAAE,CAAC6G,IAAI,EAAE7G,EAAE,CAACoE,MAAM,EAAEpE,EAAE,CAACkE,MAAM,EAAElE,EAAE,CAAC+C,MAAM,CAAC;gBACvD6C,WAAW,EAAE5F,EAAE,CAACiE,QAAQ,CAACG,MAAM,CAAC0C;cACpC,CAAC,CAAC,CAAC;cAEKrF,GAAG,GAAK0E,MAAM,CAAd1E,GAAG;cACLC,KAAK,GAAkByE,MAAM,CAA7BzE,KAAK,EAAEkE,WAAW,GAAKO,MAAM,CAAtBP,WAAW;cAElBQ,qBAAqB,GAAG9F,QAAQ,CAACoB,KAAK,CAAC,IAAIrB,QAAQ,CAACqB,KAAK,CAAC,EAChE;cACA,IAAI,CAACkE,WAAW,EAAE;gBACd,IAAIQ,qBAAqB,EAAER,WAAW,GAAG,0BAA0B,CAAC,KAC/D,IAAI,OAAOlE,KAAK,KAAK,QAAQ,EAAEkE,WAAW,GAAG,2BAA2B,CAAC,KACzEA,WAAW,GAAG,iCAAiC;cACxD;cAEMS,iBAAiB,GAAG,oBAAoB,CAACU,IAAI,CAACnB,WAAW,CAAC;cAAA,MAC5DS,iBAAiB,IAAI,CAACD,qBAAqB,IAAI,OAAO1E,KAAK,KAAK,QAAQ;gBAAAiF,SAAA,CAAAvE,IAAA;gBAAA;cAAA;cAAAuE,SAAA,CAAAxE,IAAA;cAEpET,KAAK,GAAGsF,IAAI,CAACC,SAAS,CAACvF,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;cAACiF,SAAA,CAAAvE,IAAA;cAAA;YAAA;cAAAuE,SAAA,CAAAxE,IAAA;cAAAwE,SAAA,CAAAb,EAAA,GAAAa,SAAA;cAEjCL,GAAG,iGAAAb,MAAA,CAAiGkB,SAAA,CAAAb,EAAA,CAAIoB,OAAO;cAAA,MAC/G,IAAI1B,KAAK,CAACc,GAAG,CAAC;YAAA;cAI5B;cACA;cACA;cACA;cACMT,OAAO,GAAG,CAAC,CAAC;cAClB,IAAID,WAAW,EAAEC,OAAO,CAAC,cAAc,CAAC,GAAGD,WAAW;cAACe,SAAA,CAAAvE,IAAA;cAAA,OAExBxB,cAAc,CAACc,KAAK,CAAC;YAAA;cAA9C6E,gBAAgB,GAAAI,SAAA,CAAAhC,IAAA;cACtB,IAAI4B,gBAAgB,KAAK7E,KAAK,EAAE;gBAC5B;gBACAmE,OAAO,CAAC,kBAAkB,CAAC,GAAG,MAAM;cACxC;cACA;cACAnE,KAAK,GAAG6E,gBAAgB;cAElBC,qBAAqB,GAAG,IAAI,CAACW,sBAAsB,CAACzF,KAAK,CAAC;cAAA,KAGvD8E,qBAAqB;gBAAAG,SAAA,CAAAvE,IAAA;gBAAA;cAAA;cAAAuE,SAAA,CAAAvE,IAAA;cAAA,OACd,IAAI,CAACgF,mBAAmB,CAAC3F,GAAG,EAAEoE,OAAO,CAAC;YAAA;cAAAc,SAAA,CAAAU,EAAA,GAAAV,SAAA,CAAAhC,IAAA;cAAAgC,SAAA,CAAAvE,IAAA;cAAA;YAAA;cAAAuE,SAAA,CAAAU,EAAA,GAC5C,IAAI,CAAC9C,IAAI,YAAAkB,MAAA,CAAYhE,GAAG,CAAE,CAAC;YAAA;cAAAkF,SAAA,CAAAW,EAAA,GAAAX,SAAA,CAAAU,EAAA;cAAAV,SAAA,CAAAY,EAAA,GAEzBf,qBAAqB,GAAG,IAAI,GAAG,IAAI,CAAC9B,OAAO,CAAC,CAAC;cAAAiC,SAAA,CAAAa,EAAA,GAC/C9F,KAAK;cAAAiF,SAAA,CAAAc,EAAA,GACX5B,OAAO;cAPLY,UAAU;gBACZnC,GAAG,EAAAqC,SAAA,CAAAW,EAAA;gBAGH9C,MAAM,EAAE,KAAK;gBACbC,MAAM,EAAAkC,SAAA,CAAAY,EAAA;gBACN3C,IAAI,EAAA+B,SAAA,CAAAa,EAAA;gBACJ3B,OAAO,EAAAc,SAAA,CAAAc;cAAA;cAAAd,SAAA,CAAAvE,IAAA;cAAA,OAGL,IAAI,CAACiC,UAAU,CAAChD,IAAI,CAACoF,UAAU,CAAC;YAAA;YAAA;cAAA,OAAAE,SAAA,CAAArE,IAAA;UAAA;QAAA,GAAA4D,QAAA;MAAA,CACzC;MAAA,SAAAwB,UAAAC,GAAA;QAAA,OAAA1B,UAAA,CAAAzD,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAiF,SAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;EAJI;IAAAjG,GAAA;IAAAC,KAAA;MAAA,IAAAkG,aAAA,GAAAhG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAKA,SAAA+F,SAAmBpG,GAAG;QAAA,OAAAI,mBAAA,GAAAG,IAAA,UAAA8F,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5F,IAAA,GAAA4F,SAAA,CAAA3F,IAAA;YAAA;cAClBpC,EAAE,CAACyB,GAAG,EAAEzB,EAAE,CAACoE,MAAM,CAAC;cAAC2D,SAAA,CAAA3F,IAAA;cAAA,OAEb,IAAI,CAACiC,UAAU,CAAChD,IAAI,CAAC;gBACvBiD,GAAG,EAAE,IAAI,CAACC,IAAI,YAAAkB,MAAA,CAAYhE,GAAG,CAAE,CAAC;gBAChC+C,MAAM,EAAE,QAAQ;gBAChBC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC;cACzB,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAqD,SAAA,CAAAzF,IAAA;UAAA;QAAA,GAAAuF,QAAA;MAAA,CACL;MAAA,SAAAG,aAAAC,GAAA;QAAA,OAAAL,aAAA,CAAApF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAuF,YAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;EAJI;IAAAvG,GAAA;IAAAC,KAAA,EAKA,SAAAyF,uBAAuBzF,KAAK,EAAE;MAC1B,IAAIwG,KAAK,GAAG,CAAC,CAAC;MACd,IAAI,OAAOxG,KAAK,KAAK,QAAQ,EAAE;QAC3B;QACA;QACAwG,KAAK,GAAGxG,KAAK,CAACmC,MAAM;MACxB;MACA,IAAIxD,QAAQ,CAACqB,KAAK,CAAC,EAAE;QACjBwG,KAAK,GAAGxG,KAAK,CAACyG,UAAU;MAC5B;MACA,IAAI7H,QAAQ,CAACoB,KAAK,CAAC,EAAE;QACjB;QACAwG,KAAK,GAAGE,QAAQ;MACpB;MACA,OAAOF,KAAK,IAAIrH,2BAA2B;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAY,GAAA;IAAAC,KAAA;MAAA,IAAA2G,oBAAA,GAAAzG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAMA,SAAAwG,SAA0B7G,GAAG,EAAEoE,OAAO;QAAA,IAAApC,QAAA;QAAA,OAAA5B,mBAAA,GAAAG,IAAA,UAAAuG,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAArG,IAAA,GAAAqG,SAAA,CAAApG,IAAA;YAAA;cAAAoG,SAAA,CAAApG,IAAA;cAAA,OACX,IAAI,CAACiC,UAAU,CAAChD,IAAI,CAAC;gBACxCiD,GAAG,EAAE,IAAI,CAACC,IAAI,YAAAkB,MAAA,CAAYhE,GAAG,uBAAoB,CAAC;gBAClDgD,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;gBACtBF,MAAM,EAAE,KAAK;gBACbqB,OAAO,EAAPA;cACJ,CAAC,CAAC;YAAA;cALIpC,QAAQ,GAAA+E,SAAA,CAAA7D,IAAA;cAAA,OAAA6D,SAAA,CAAAnG,MAAA,WAQPoB,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAAC6D,SAAS;YAAA;YAAA;cAAA,OAAAD,SAAA,CAAAlG,IAAA;UAAA;QAAA,GAAAgG,QAAA;MAAA,CACtC;MAAA,SAAAlB,oBAAAsB,GAAA,EAAAC,GAAA;QAAA,OAAAN,oBAAA,CAAA7F,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAA2E,mBAAA;IAAA;EAAA;EAAA,OAAAtG,mBAAA;AAAA,EA7N6BX,cAAc;AAgOhDyI,MAAM,CAACC,OAAO,GAAG/H,mBAAmB;;AAEpC;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}