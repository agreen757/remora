{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable max-len,quotes,quote-props */\nvar intlStrings = {\n  'inputSchema.validation.generic': 'Field {rootName}.{fieldKey} {message}',\n  'inputSchema.validation.required': 'Field {rootName}.{fieldKey} is required',\n  'inputSchema.validation.proxyRequired': 'Field {rootName}.{fieldKey} is required. Please provide custom proxy URLs or use Apify Proxy.',\n  'inputSchema.validation.requestListSourcesInvalid': 'Items in {rootName}.{fieldKey} at positions [{invalidIndexes}] do not contain valid URLs',\n  'inputSchema.validation.arrayKeysInvalid': 'Keys in {rootName}.{fieldKey} at positions [{invalidIndexes}] should match regular expression \"{pattern}\"',\n  'inputSchema.validation.arrayValuesInvalid': 'Values in {rootName}.{fieldKey} at positions [{invalidIndexes}] should match regular expression \"{pattern}\"',\n  'inputSchema.validation.objectKeysInvalid': 'Keys [{invalidKeys}] in {rootName}.{fieldKey} should match regular expression \"{pattern}',\n  'inputSchema.validation.objectValuesInvalid': 'Keys [{invalidKeys}] in {rootName}.{fieldKey} should have string value which matches regular expression \"{pattern}\"',\n  'inputSchema.validation.additionalProperty': 'Property {rootName}.{fieldKey} is not allowed.',\n  'inputSchema.validation.proxyGroupsNotAvailable': 'You currently do not have access to proxy groups: {groups}',\n  'inputSchema.validation.customProxyInvalid': 'Proxy URL \"{invalidUrl}\" has invalid format, it must be http://[username[:password]]@hostname:port.',\n  'inputSchema.validation.apifyProxyCountryInvalid': 'Country code \"{invalidCountry}\" is invalid. Only ISO 3166-1 alpha-2 country codes are supported.',\n  'inputSchema.validation.apifyProxyCountryWithoutApifyProxyForbidden': 'The country for Apify Proxy can be specified only when using Apify Proxy.',\n  'inputSchema.validation.noAvailableAutoProxy': 'Currently you do not have access to any proxy group usable in automatic mode.',\n  'inputSchema.validation.noMatchingDefinition': 'Field schema.properties.{fieldKey} is not matching any input schema type definition. Please make sure that it\\'s type is valid.'\n};\n/* eslint-enable max-len,quotes,quote-props */\n// Helper function to simulate intl formatMessage function\n\nexports.m = function (stringId, variables) {\n  var text = intlStrings[stringId];\n  if (!text) return stringId;\n  if (variables) {\n    Object.keys(variables).forEach(function (variableName) {\n      text = text.split(\"{\".concat(variableName, \"}\")).join(variables[variableName]);\n    });\n  }\n  return text;\n};","map":{"version":3,"names":["intlStrings","exports","m","stringId","variables","text","Object","keys","forEach","variableName","split","concat","join"],"sources":["/project/remora/node_modules/apify-shared/intl.js"],"sourcesContent":["\"use strict\";\n\n/* eslint-disable max-len,quotes,quote-props */\nconst intlStrings = {\n  'inputSchema.validation.generic': 'Field {rootName}.{fieldKey} {message}',\n  'inputSchema.validation.required': 'Field {rootName}.{fieldKey} is required',\n  'inputSchema.validation.proxyRequired': 'Field {rootName}.{fieldKey} is required. Please provide custom proxy URLs or use Apify Proxy.',\n  'inputSchema.validation.requestListSourcesInvalid': 'Items in {rootName}.{fieldKey} at positions [{invalidIndexes}] do not contain valid URLs',\n  'inputSchema.validation.arrayKeysInvalid': 'Keys in {rootName}.{fieldKey} at positions [{invalidIndexes}] should match regular expression \"{pattern}\"',\n  'inputSchema.validation.arrayValuesInvalid': 'Values in {rootName}.{fieldKey} at positions [{invalidIndexes}] should match regular expression \"{pattern}\"',\n  'inputSchema.validation.objectKeysInvalid': 'Keys [{invalidKeys}] in {rootName}.{fieldKey} should match regular expression \"{pattern}',\n  'inputSchema.validation.objectValuesInvalid': 'Keys [{invalidKeys}] in {rootName}.{fieldKey} should have string value which matches regular expression \"{pattern}\"',\n  'inputSchema.validation.additionalProperty': 'Property {rootName}.{fieldKey} is not allowed.',\n  'inputSchema.validation.proxyGroupsNotAvailable': 'You currently do not have access to proxy groups: {groups}',\n  'inputSchema.validation.customProxyInvalid': 'Proxy URL \"{invalidUrl}\" has invalid format, it must be http://[username[:password]]@hostname:port.',\n  'inputSchema.validation.apifyProxyCountryInvalid': 'Country code \"{invalidCountry}\" is invalid. Only ISO 3166-1 alpha-2 country codes are supported.',\n  'inputSchema.validation.apifyProxyCountryWithoutApifyProxyForbidden': 'The country for Apify Proxy can be specified only when using Apify Proxy.',\n  'inputSchema.validation.noAvailableAutoProxy': 'Currently you do not have access to any proxy group usable in automatic mode.',\n  'inputSchema.validation.noMatchingDefinition': 'Field schema.properties.{fieldKey} is not matching any input schema type definition. Please make sure that it\\'s type is valid.'\n};\n/* eslint-enable max-len,quotes,quote-props */\n// Helper function to simulate intl formatMessage function\n\nexports.m = function (stringId, variables) {\n  let text = intlStrings[stringId];\n  if (!text) return stringId;\n\n  if (variables) {\n    Object.keys(variables).forEach(variableName => {\n      text = text.split(`{${variableName}}`).join(variables[variableName]);\n    });\n  }\n\n  return text;\n};"],"mappings":"AAAA,YAAY;;AAEZ;AACA,IAAMA,WAAW,GAAG;EAClB,gCAAgC,EAAE,uCAAuC;EACzE,iCAAiC,EAAE,yCAAyC;EAC5E,sCAAsC,EAAE,+FAA+F;EACvI,kDAAkD,EAAE,0FAA0F;EAC9I,yCAAyC,EAAE,2GAA2G;EACtJ,2CAA2C,EAAE,6GAA6G;EAC1J,0CAA0C,EAAE,0FAA0F;EACtI,4CAA4C,EAAE,qHAAqH;EACnK,2CAA2C,EAAE,gDAAgD;EAC7F,gDAAgD,EAAE,4DAA4D;EAC9G,2CAA2C,EAAE,qGAAqG;EAClJ,iDAAiD,EAAE,kGAAkG;EACrJ,oEAAoE,EAAE,2EAA2E;EACjJ,6CAA6C,EAAE,+EAA+E;EAC9H,6CAA6C,EAAE;AACjD,CAAC;AACD;AACA;;AAEAC,OAAO,CAACC,CAAC,GAAG,UAAUC,QAAQ,EAAEC,SAAS,EAAE;EACzC,IAAIC,IAAI,GAAGL,WAAW,CAACG,QAAQ,CAAC;EAChC,IAAI,CAACE,IAAI,EAAE,OAAOF,QAAQ;EAE1B,IAAIC,SAAS,EAAE;IACbE,MAAM,CAACC,IAAI,CAACH,SAAS,CAAC,CAACI,OAAO,CAAC,UAAAC,YAAY,EAAI;MAC7CJ,IAAI,GAAGA,IAAI,CAACK,KAAK,KAAAC,MAAA,CAAKF,YAAY,MAAG,CAAC,CAACG,IAAI,CAACR,SAAS,CAACK,YAAY,CAAC,CAAC;IACtE,CAAC,CAAC;EACJ;EAEA,OAAOJ,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}