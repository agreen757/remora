{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SPLIT_PATH_REGEX = exports.GITHUB_GIST_URL_REGEX = exports.HTTP_URL_REGEX = exports.URL_REGEX = exports.GITHUB_REGEX = exports.TWITTER_REGEX = exports.KEY_VALUE_STORE_KEY_REGEX = exports.PROXY_URL_REGEX = exports.APIFY_PROXY_VALUE_REGEX = exports.DNS_SAFE_NAME_REGEX = exports.GIT_REPO_REGEX = exports.EMAIL_REGEX = exports.EMAIL_REGEX_STR = void 0;\n\n/**\n * Email validation regexp adapted from https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n * with our restriction that hostname must be a TLD! (will not match example@localhost)\n */\nvar EMAIL_REGEX_STR = '[a-zA-Z0-9.!#$%&\\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+'; // eslint-disable-line max-len\n\n/**\n * Matches a string containing valid email\n * Hostname must be a TLD! (will not match example@localhost)\n */\n\nexports.EMAIL_REGEX_STR = EMAIL_REGEX_STR;\nvar EMAIL_REGEX = new RegExp(\"^\".concat(EMAIL_REGEX_STR, \"$\"));\n/**\n * Comes from https://github.com/jonschlinkert/is-git-url/ but we have:\n * - added support for ...:/dir/subdir syntax\n */\n\nexports.EMAIL_REGEX = EMAIL_REGEX;\nvar GIT_REPO_REGEX = /^(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\/?|#[-\\d\\w._:/]+?)$/;\n/**\n * Matches a string that might be used in a hostname (e.g. \"my-host-name\")\n */\n\nexports.GIT_REPO_REGEX = GIT_REPO_REGEX;\nvar DNS_SAFE_NAME_REGEX = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])$/;\n/**\n * Regular expression to validate Apify Proxy group name and session ID.\n * This must correspond to REGEX_STR_USERNAME_VALUE in apify-system!\n */\n\nexports.DNS_SAFE_NAME_REGEX = DNS_SAFE_NAME_REGEX;\nvar APIFY_PROXY_VALUE_REGEX = /^[\\w._~]+$/; // Regular expression to validate proxy urls, matches\n// http://asd:qweqwe@proxy.apify.com:8000\n// http://asd:qweqwe@proxy.apify.com:8000/\n// http://123123:qweqwe:asdasd@proxy.com:55555\n// http://proxy.apify.com:5000\n// http://root@proxy.apify.com:5000\n\nexports.APIFY_PROXY_VALUE_REGEX = APIFY_PROXY_VALUE_REGEX;\nvar PROXY_URL_REGEX = /^http:\\/\\/(([^:]+:)?[^@]*@)?[^.:@]+\\.[^:]+:[\\d]+?$/;\n/**\n * AWS S3 docs say:\n * \"The following character sets are generally safe for use in key names:\n * - Alphanumeric characters [0-9a-zA-Z]\n * - Special characters !, -, _, ., *, ', (, and )\"\n * However, some of those characters are not valid across Win/Unix OS.\n * Therefore we allow only a subset and limit the length to 256 characters (TODO: document this)\n */\n\nexports.PROXY_URL_REGEX = PROXY_URL_REGEX;\nvar KEY_VALUE_STORE_KEY_REGEX = /^([a-zA-Z0-9!\\-_.'()]{1,256})$/; // taken from https://github.com/shinnn/github-username-regex\n\nexports.KEY_VALUE_STORE_KEY_REGEX = KEY_VALUE_STORE_KEY_REGEX;\nvar GITHUB_REGEX_STR = '[a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38}';\nvar TWITTER_REGEX = /^@[a-z0-9_]{1,15}$/i;\nexports.TWITTER_REGEX = TWITTER_REGEX;\nvar GITHUB_REGEX = new RegExp(\"^\".concat(GITHUB_REGEX_STR, \"$\"), 'i'); // @TODO: Discontinue usage of this regexps, in favor of HTTP_URL_REGEX\n\nexports.GITHUB_REGEX = GITHUB_REGEX;\nvar URL_REGEX = /^(http:\\/\\/|https:\\/\\/)/i; // Inspired by https://gist.github.com/dperini/729294, but doesn't match FTP URLs\n\n/* eslint-disable */\n\nexports.URL_REGEX = URL_REGEX;\nvar HTTP_URL_REGEX = new RegExp('^' +\n// protocol identifier (optional)\n// short syntax // still required\n// NOTE: We removed \"|ftp\"\n'(?:(?:(?:https?):)?\\\\/\\\\/)' +\n// user:pass BasicAuth (optional)\n'(?:\\\\S+(?::\\\\S*)?@)?' + '(?:' +\n// IP address exclusion\n// private & local networks\n'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' + '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' + '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n// IP address dotted notation octets\n// excludes loopback network 0.0.0.0\n// excludes reserved space >= 224.0.0.0\n// excludes network & broadcast addresses\n// (first & last IP address of each class)\n'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' + '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' + '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' + '|' +\n// host & domain names, may end with dot\n// can be replaced by a shortest alternative\n// (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\n'(?:' + '(?:' + \"[a-z0-9\\\\u00a1-\\\\uffff]\" + \"[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}\" + ')?' + \"[a-z0-9\\\\u00a1-\\\\uffff]\\\\.\" + ')+' +\n// TLD identifier name, may end with dot\n// NOTE: \"|xn--[a-z0-9]+\" is our addition to support IDNs like \"http://xn--80aaxitdbjk.xn--p1ai\",\n// they can be used in a browser, so we consider them valid\n\"(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?|xn--[a-z0-9]+)\" + ')' +\n// port number (optional)\n'(?::\\\\d{2,5})?' +\n// resource path (optional)\n'(?:[/?#]\\\\S*)?' + '$', 'i');\n/* eslint-enable */\n// E.g. https://gist.github.com/jancurn/2dbe83fea77c439b1119fb3f118513e7\n\nexports.HTTP_URL_REGEX = HTTP_URL_REGEX;\nvar GITHUB_GIST_URL_REGEX = new RegExp(\"^https:\\\\/\\\\/gist\\\\.github\\\\.com\\\\/\".concat(GITHUB_REGEX_STR, \"\\\\/[0-9a-f]{32}$\"), 'i'); // Split's path /aaa/bbb/ccc into an array ['aaa', 'bbb', 'ccc].\n\nexports.GITHUB_GIST_URL_REGEX = GITHUB_GIST_URL_REGEX;\nvar SPLIT_PATH_REGEX = /[^/]+/g;\nexports.SPLIT_PATH_REGEX = SPLIT_PATH_REGEX;","map":{"version":3,"names":["Object","defineProperty","exports","value","SPLIT_PATH_REGEX","GITHUB_GIST_URL_REGEX","HTTP_URL_REGEX","URL_REGEX","GITHUB_REGEX","TWITTER_REGEX","KEY_VALUE_STORE_KEY_REGEX","PROXY_URL_REGEX","APIFY_PROXY_VALUE_REGEX","DNS_SAFE_NAME_REGEX","GIT_REPO_REGEX","EMAIL_REGEX","EMAIL_REGEX_STR","RegExp","concat","GITHUB_REGEX_STR"],"sources":["/project/remora/node_modules/apify-shared/regexs.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SPLIT_PATH_REGEX = exports.GITHUB_GIST_URL_REGEX = exports.HTTP_URL_REGEX = exports.URL_REGEX = exports.GITHUB_REGEX = exports.TWITTER_REGEX = exports.KEY_VALUE_STORE_KEY_REGEX = exports.PROXY_URL_REGEX = exports.APIFY_PROXY_VALUE_REGEX = exports.DNS_SAFE_NAME_REGEX = exports.GIT_REPO_REGEX = exports.EMAIL_REGEX = exports.EMAIL_REGEX_STR = void 0;\n\n/**\n * Email validation regexp adapted from https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n * with our restriction that hostname must be a TLD! (will not match example@localhost)\n */\nconst EMAIL_REGEX_STR = '[a-zA-Z0-9.!#$%&\\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+'; // eslint-disable-line max-len\n\n/**\n * Matches a string containing valid email\n * Hostname must be a TLD! (will not match example@localhost)\n */\n\nexports.EMAIL_REGEX_STR = EMAIL_REGEX_STR;\nconst EMAIL_REGEX = new RegExp(`^${EMAIL_REGEX_STR}$`);\n/**\n * Comes from https://github.com/jonschlinkert/is-git-url/ but we have:\n * - added support for ...:/dir/subdir syntax\n */\n\nexports.EMAIL_REGEX = EMAIL_REGEX;\nconst GIT_REPO_REGEX = /^(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\/?|#[-\\d\\w._:/]+?)$/;\n/**\n * Matches a string that might be used in a hostname (e.g. \"my-host-name\")\n */\n\nexports.GIT_REPO_REGEX = GIT_REPO_REGEX;\nconst DNS_SAFE_NAME_REGEX = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])$/;\n/**\n * Regular expression to validate Apify Proxy group name and session ID.\n * This must correspond to REGEX_STR_USERNAME_VALUE in apify-system!\n */\n\nexports.DNS_SAFE_NAME_REGEX = DNS_SAFE_NAME_REGEX;\nconst APIFY_PROXY_VALUE_REGEX = /^[\\w._~]+$/; // Regular expression to validate proxy urls, matches\n// http://asd:qweqwe@proxy.apify.com:8000\n// http://asd:qweqwe@proxy.apify.com:8000/\n// http://123123:qweqwe:asdasd@proxy.com:55555\n// http://proxy.apify.com:5000\n// http://root@proxy.apify.com:5000\n\nexports.APIFY_PROXY_VALUE_REGEX = APIFY_PROXY_VALUE_REGEX;\nconst PROXY_URL_REGEX = /^http:\\/\\/(([^:]+:)?[^@]*@)?[^.:@]+\\.[^:]+:[\\d]+?$/;\n/**\n * AWS S3 docs say:\n * \"The following character sets are generally safe for use in key names:\n * - Alphanumeric characters [0-9a-zA-Z]\n * - Special characters !, -, _, ., *, ', (, and )\"\n * However, some of those characters are not valid across Win/Unix OS.\n * Therefore we allow only a subset and limit the length to 256 characters (TODO: document this)\n */\n\nexports.PROXY_URL_REGEX = PROXY_URL_REGEX;\nconst KEY_VALUE_STORE_KEY_REGEX = /^([a-zA-Z0-9!\\-_.'()]{1,256})$/; // taken from https://github.com/shinnn/github-username-regex\n\nexports.KEY_VALUE_STORE_KEY_REGEX = KEY_VALUE_STORE_KEY_REGEX;\nconst GITHUB_REGEX_STR = '[a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38}';\nconst TWITTER_REGEX = /^@[a-z0-9_]{1,15}$/i;\nexports.TWITTER_REGEX = TWITTER_REGEX;\nconst GITHUB_REGEX = new RegExp(`^${GITHUB_REGEX_STR}$`, 'i'); // @TODO: Discontinue usage of this regexps, in favor of HTTP_URL_REGEX\n\nexports.GITHUB_REGEX = GITHUB_REGEX;\nconst URL_REGEX = /^(http:\\/\\/|https:\\/\\/)/i; // Inspired by https://gist.github.com/dperini/729294, but doesn't match FTP URLs\n\n/* eslint-disable */\n\nexports.URL_REGEX = URL_REGEX;\nconst HTTP_URL_REGEX = new RegExp('^' + // protocol identifier (optional)\n// short syntax // still required\n// NOTE: We removed \"|ftp\"\n'(?:(?:(?:https?):)?\\\\/\\\\/)' + // user:pass BasicAuth (optional)\n'(?:\\\\S+(?::\\\\S*)?@)?' + '(?:' + // IP address exclusion\n// private & local networks\n'(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' + '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' + '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' + // IP address dotted notation octets\n// excludes loopback network 0.0.0.0\n// excludes reserved space >= 224.0.0.0\n// excludes network & broadcast addresses\n// (first & last IP address of each class)\n'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' + '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' + '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' + '|' + // host & domain names, may end with dot\n// can be replaced by a shortest alternative\n// (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\n'(?:' + '(?:' + '[a-z0-9\\\\u00a1-\\\\uffff]' + '[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}' + ')?' + '[a-z0-9\\\\u00a1-\\\\uffff]\\\\.' + ')+' + // TLD identifier name, may end with dot\n// NOTE: \"|xn--[a-z0-9]+\" is our addition to support IDNs like \"http://xn--80aaxitdbjk.xn--p1ai\",\n// they can be used in a browser, so we consider them valid\n'(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?|xn--[a-z0-9]+)' + ')' + // port number (optional)\n'(?::\\\\d{2,5})?' + // resource path (optional)\n'(?:[/?#]\\\\S*)?' + '$', 'i');\n/* eslint-enable */\n// E.g. https://gist.github.com/jancurn/2dbe83fea77c439b1119fb3f118513e7\n\nexports.HTTP_URL_REGEX = HTTP_URL_REGEX;\nconst GITHUB_GIST_URL_REGEX = new RegExp(`^https:\\\\/\\\\/gist\\\\.github\\\\.com\\\\/${GITHUB_REGEX_STR}\\\\/[0-9a-f]{32}$`, 'i'); // Split's path /aaa/bbb/ccc into an array ['aaa', 'bbb', 'ccc].\n\nexports.GITHUB_GIST_URL_REGEX = GITHUB_GIST_URL_REGEX;\nconst SPLIT_PATH_REGEX = /[^/]+/g;\nexports.SPLIT_PATH_REGEX = SPLIT_PATH_REGEX;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}