{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/project/remora/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/project/remora/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/project/remora/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/project/remora/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatePredicate = void 0;\nvar predicate_1 = require(\"./predicate\");\nvar DatePredicate = /*#__PURE__*/function (_predicate_1$Predicat) {\n  _inherits(DatePredicate, _predicate_1$Predicat);\n  var _super = _createSuper(DatePredicate);\n  /**\n  @hidden\n  */\n  function DatePredicate(options) {\n    _classCallCheck(this, DatePredicate);\n    return _super.call(this, 'date', options);\n  }\n  /**\n  Test a date to be before another date.\n   @param date - Maximum value.\n  */\n  _createClass(DatePredicate, [{\n    key: \"before\",\n    value: function before(date) {\n      return this.addValidator({\n        message: function message(value, label) {\n          return \"Expected \".concat(label, \" \").concat(value.toISOString(), \" to be before \").concat(date.toISOString());\n        },\n        validator: function validator(value) {\n          return value.getTime() < date.getTime();\n        }\n      });\n    }\n    /**\n    Test a date to be before another date.\n     @param date - Minimum value.\n    */\n  }, {\n    key: \"after\",\n    value: function after(date) {\n      return this.addValidator({\n        message: function message(value, label) {\n          return \"Expected \".concat(label, \" \").concat(value.toISOString(), \" to be after \").concat(date.toISOString());\n        },\n        validator: function validator(value) {\n          return value.getTime() > date.getTime();\n        }\n      });\n    }\n  }]);\n  return DatePredicate;\n}(predicate_1.Predicate);\nexports.DatePredicate = DatePredicate;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_inherits","_createSuper","Object","defineProperty","exports","value","DatePredicate","predicate_1","_predicate_1$Predicat","_super","options","call","key","before","date","addValidator","message","label","concat","toISOString","validator","getTime","after","Predicate"],"sources":["/project/remora/node_modules/ow/dist/predicates/date.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatePredicate = void 0;\nconst predicate_1 = require(\"./predicate\");\nclass DatePredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('date', options);\n    }\n    /**\n    Test a date to be before another date.\n\n    @param date - Maximum value.\n    */\n    before(date) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} ${value.toISOString()} to be before ${date.toISOString()}`,\n            validator: value => value.getTime() < date.getTime()\n        });\n    }\n    /**\n    Test a date to be before another date.\n\n    @param date - Minimum value.\n    */\n    after(date) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} ${value.toISOString()} to be after ${date.toISOString()}`,\n            validator: value => value.getTime() > date.getTime()\n        });\n    }\n}\nexports.DatePredicate = DatePredicate;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,0EAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAF,OAAA,uEAAAC,OAAA;AAAA,IAAAE,SAAA,GAAAH,OAAA,oEAAAC,OAAA;AAAA,IAAAG,YAAA,GAAAJ,OAAA,uEAAAC,OAAA;AACbI,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,IAAMC,WAAW,GAAGV,OAAO,CAAC,aAAa,CAAC;AAAC,IACrCS,aAAa,0BAAAE,qBAAA;EAAAR,SAAA,CAAAM,aAAA,EAAAE,qBAAA;EAAA,IAAAC,MAAA,GAAAR,YAAA,CAAAK,aAAA;EACf;AACJ;AACA;EACI,SAAAA,cAAYI,OAAO,EAAE;IAAAd,eAAA,OAAAU,aAAA;IAAA,OAAAG,MAAA,CAAAE,IAAA,OACX,MAAM,EAAED,OAAO;EACzB;EACA;AACJ;AACA;AACA;EAHIX,YAAA,CAAAO,aAAA;IAAAM,GAAA;IAAAP,KAAA,EAKA,SAAAQ,OAAOC,IAAI,EAAE;MACT,OAAO,IAAI,CAACC,YAAY,CAAC;QACrBC,OAAO,EAAE,SAAAA,QAACX,KAAK,EAAEY,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,OAAAC,MAAA,CAAIb,KAAK,CAACc,WAAW,CAAC,CAAC,oBAAAD,MAAA,CAAiBJ,IAAI,CAACK,WAAW,CAAC,CAAC;QAAA,CAAE;QACxGC,SAAS,EAAE,SAAAA,UAAAf,KAAK;UAAA,OAAIA,KAAK,CAACgB,OAAO,CAAC,CAAC,GAAGP,IAAI,CAACO,OAAO,CAAC,CAAC;QAAA;MACxD,CAAC,CAAC;IACN;IACA;AACJ;AACA;AACA;EAHI;IAAAT,GAAA;IAAAP,KAAA,EAKA,SAAAiB,MAAMR,IAAI,EAAE;MACR,OAAO,IAAI,CAACC,YAAY,CAAC;QACrBC,OAAO,EAAE,SAAAA,QAACX,KAAK,EAAEY,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,OAAAC,MAAA,CAAIb,KAAK,CAACc,WAAW,CAAC,CAAC,mBAAAD,MAAA,CAAgBJ,IAAI,CAACK,WAAW,CAAC,CAAC;QAAA,CAAE;QACvGC,SAAS,EAAE,SAAAA,UAAAf,KAAK;UAAA,OAAIA,KAAK,CAACgB,OAAO,CAAC,CAAC,GAAGP,IAAI,CAACO,OAAO,CAAC,CAAC;QAAA;MACxD,CAAC,CAAC;IACN;EAAC;EAAA,OAAAf,aAAA;AAAA,EA5BuBC,WAAW,CAACgB,SAAS;AA8BjDnB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}