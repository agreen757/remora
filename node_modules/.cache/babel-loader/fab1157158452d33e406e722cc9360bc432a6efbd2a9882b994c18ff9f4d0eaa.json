{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.limitDepth = exports.getLevelFromEnv = void 0;\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\nvar _utilities = require(\"./utilities.client\");\nvar _consts = require(\"./consts\");\nvar _log_consts = require(\"./log_consts\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Gets log level from env variable.\n * Both integers and strings (WARNING) are supported.\n */\nvar getLevelFromEnv = function getLevelFromEnv() {\n  var envVar = process.env[_consts.ENV_VARS.LOG_LEVEL];\n  if (!envVar) return _log_consts.LEVELS.INFO;\n  if (_log_consts.LEVELS[envVar]) return _log_consts.LEVELS[envVar];\n  return parseInt(envVar, 10);\n};\n/**\n* Limits given object to given depth.\n*\n* ie. Replaces object's content by '[object]' and array's content\n* by '[array]' when the value is nested more than given limit.\n*/\n\nexports.getLevelFromEnv = getLevelFromEnv;\nvar limitDepth = function limitDepth(record, depth, maxStringLength) {\n  // handle common cases quickly\n  var type = typeof record;\n  if (type === 'string') {\n    return record.length > maxStringLength ? (0, _utilities.truncate)(record, maxStringLength) : record;\n  }\n  if (type === 'number' || type === 'boolean' || record === null || record === undefined || _underscore.default.isDate(record)) return record; // WORKAROUND: Error's properties are not iterable, convert it to a simple object and preserve custom properties\n  // NOTE: _.isError() doesn't work on Match.Error\n\n  if (record instanceof Error) {\n    record = _underscore.default.extend({\n      name: record.name,\n      message: record.message,\n      stack: record.stack\n    }, record);\n  }\n  var nextCall = _underscore.default.partial(limitDepth, _underscore.default, depth - 1, maxStringLength);\n  if (_underscore.default.isArray(record)) return depth ? _underscore.default.map(record, nextCall) : '[array]';\n  if (_underscore.default.isObject(record)) return depth ? _underscore.default.mapObject(record, nextCall) : '[object]'; // this shouldn't happen\n\n  console.log(\"WARNING: Object cannot be logged: \".concat(record));\n  return undefined;\n};\nexports.limitDepth = limitDepth;","map":{"version":3,"names":["Object","defineProperty","exports","value","limitDepth","getLevelFromEnv","_underscore","_interopRequireDefault","require","_utilities","_consts","_log_consts","obj","__esModule","default","envVar","process","env","ENV_VARS","LOG_LEVEL","LEVELS","INFO","parseInt","record","depth","maxStringLength","type","length","truncate","undefined","isDate","Error","extend","name","message","stack","nextCall","partial","isArray","map","isObject","mapObject","console","log","concat"],"sources":["/project/remora/node_modules/apify-shared/log_helpers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.limitDepth = exports.getLevelFromEnv = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _utilities = require(\"./utilities.client\");\n\nvar _consts = require(\"./consts\");\n\nvar _log_consts = require(\"./log_consts\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Gets log level from env variable.\n * Both integers and strings (WARNING) are supported.\n */\nconst getLevelFromEnv = () => {\n  const envVar = process.env[_consts.ENV_VARS.LOG_LEVEL];\n  if (!envVar) return _log_consts.LEVELS.INFO;\n  if (_log_consts.LEVELS[envVar]) return _log_consts.LEVELS[envVar];\n  return parseInt(envVar, 10);\n};\n/**\n* Limits given object to given depth.\n*\n* ie. Replaces object's content by '[object]' and array's content\n* by '[array]' when the value is nested more than given limit.\n*/\n\n\nexports.getLevelFromEnv = getLevelFromEnv;\n\nconst limitDepth = (record, depth, maxStringLength) => {\n  // handle common cases quickly\n  const type = typeof record;\n\n  if (type === 'string') {\n    return record.length > maxStringLength ? (0, _utilities.truncate)(record, maxStringLength) : record;\n  }\n\n  if (type === 'number' || type === 'boolean' || record === null || record === undefined || _underscore.default.isDate(record)) return record; // WORKAROUND: Error's properties are not iterable, convert it to a simple object and preserve custom properties\n  // NOTE: _.isError() doesn't work on Match.Error\n\n  if (record instanceof Error) {\n    record = _underscore.default.extend({\n      name: record.name,\n      message: record.message,\n      stack: record.stack\n    }, record);\n  }\n\n  const nextCall = _underscore.default.partial(limitDepth, _underscore.default, depth - 1, maxStringLength);\n\n  if (_underscore.default.isArray(record)) return depth ? _underscore.default.map(record, nextCall) : '[array]';\n  if (_underscore.default.isObject(record)) return depth ? _underscore.default.mapObject(record, nextCall) : '[object]'; // this shouldn't happen\n\n  console.log(`WARNING: Object cannot be logged: ${record}`);\n  return undefined;\n};\n\nexports.limitDepth = limitDepth;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}