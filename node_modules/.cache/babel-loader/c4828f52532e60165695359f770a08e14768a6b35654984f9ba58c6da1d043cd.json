{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/project/remora/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/project/remora/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/project/remora/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/project/remora/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorPredicate = void 0;\nvar predicate_1 = require(\"./predicate\");\nvar ErrorPredicate = /*#__PURE__*/function (_predicate_1$Predicat) {\n  _inherits(ErrorPredicate, _predicate_1$Predicat);\n  var _super = _createSuper(ErrorPredicate);\n  /**\n  @hidden\n  */\n  function ErrorPredicate(options) {\n    _classCallCheck(this, ErrorPredicate);\n    return _super.call(this, 'error', options);\n  }\n  /**\n  Test an error to have a specific name.\n   @param expected - Expected name of the Error.\n  */\n  _createClass(ErrorPredicate, [{\n    key: \"name\",\n    value: function name(expected) {\n      return this.addValidator({\n        message: function message(error, label) {\n          return \"Expected \".concat(label, \" to have name `\").concat(expected, \"`, got `\").concat(error.name, \"`\");\n        },\n        validator: function validator(error) {\n          return error.name === expected;\n        }\n      });\n    }\n    /**\n    Test an error to have a specific message.\n     @param expected - Expected message of the Error.\n    */\n  }, {\n    key: \"message\",\n    value: function message(expected) {\n      return this.addValidator({\n        message: function message(error, label) {\n          return \"Expected \".concat(label, \" message to be `\").concat(expected, \"`, got `\").concat(error.message, \"`\");\n        },\n        validator: function validator(error) {\n          return error.message === expected;\n        }\n      });\n    }\n    /**\n    Test the error message to include a specific message.\n     @param message - Message that should be included in the error.\n    */\n  }, {\n    key: \"messageIncludes\",\n    value: function messageIncludes(_message) {\n      return this.addValidator({\n        message: function message(error, label) {\n          return \"Expected \".concat(label, \" message to include `\").concat(_message, \"`, got `\").concat(error.message, \"`\");\n        },\n        validator: function validator(error) {\n          return error.message.includes(_message);\n        }\n      });\n    }\n    /**\n    Test the error object to have specific keys.\n     @param keys - One or more keys which should be part of the error object.\n    */\n  }, {\n    key: \"hasKeys\",\n    value: function hasKeys() {\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n      return this.addValidator({\n        message: function message(_, label) {\n          return \"Expected \".concat(label, \" message to have keys `\").concat(keys.join('`, `'), \"`\");\n        },\n        validator: function validator(error) {\n          return keys.every(function (key) {\n            return Object.prototype.hasOwnProperty.call(error, key);\n          });\n        }\n      });\n    }\n    /**\n    Test an error to be of a specific instance type.\n     @param instance - The expected instance type of the error.\n    */\n  }, {\n    key: \"instanceOf\",\n    value: function instanceOf(instance) {\n      return this.addValidator({\n        message: function message(error, label) {\n          return \"Expected \".concat(label, \" `\").concat(error.name, \"` to be of type `\").concat(instance.name, \"`\");\n        },\n        validator: function validator(error) {\n          return error instanceof instance;\n        }\n      });\n    }\n    /**\n    Test an Error to be a TypeError.\n    */\n  }, {\n    key: \"typeError\",\n    get: function get() {\n      return this.instanceOf(TypeError);\n    }\n    /**\n    Test an Error to be an EvalError.\n    */\n  }, {\n    key: \"evalError\",\n    get: function get() {\n      return this.instanceOf(EvalError);\n    }\n    /**\n    Test an Error to be a RangeError.\n    */\n  }, {\n    key: \"rangeError\",\n    get: function get() {\n      return this.instanceOf(RangeError);\n    }\n    /**\n    Test an Error to be a ReferenceError.\n    */\n  }, {\n    key: \"referenceError\",\n    get: function get() {\n      return this.instanceOf(ReferenceError);\n    }\n    /**\n    Test an Error to be a SyntaxError.\n    */\n  }, {\n    key: \"syntaxError\",\n    get: function get() {\n      return this.instanceOf(SyntaxError);\n    }\n    /**\n    Test an Error to be a URIError.\n    */\n  }, {\n    key: \"uriError\",\n    get: function get() {\n      return this.instanceOf(URIError);\n    }\n  }]);\n  return ErrorPredicate;\n}(predicate_1.Predicate);\nexports.ErrorPredicate = ErrorPredicate;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_inherits","_createSuper","Object","defineProperty","exports","value","ErrorPredicate","predicate_1","_predicate_1$Predicat","_super","options","call","key","name","expected","addValidator","message","error","label","concat","validator","messageIncludes","includes","hasKeys","_len","arguments","length","keys","Array","_key","_","join","every","prototype","hasOwnProperty","instanceOf","instance","get","TypeError","EvalError","RangeError","ReferenceError","SyntaxError","URIError","Predicate"],"sources":["/project/remora/node_modules/ow/dist/predicates/error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ErrorPredicate = void 0;\nconst predicate_1 = require(\"./predicate\");\nclass ErrorPredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('error', options);\n    }\n    /**\n    Test an error to have a specific name.\n\n    @param expected - Expected name of the Error.\n    */\n    name(expected) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} to have name \\`${expected}\\`, got \\`${error.name}\\``,\n            validator: error => error.name === expected\n        });\n    }\n    /**\n    Test an error to have a specific message.\n\n    @param expected - Expected message of the Error.\n    */\n    message(expected) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} message to be \\`${expected}\\`, got \\`${error.message}\\``,\n            validator: error => error.message === expected\n        });\n    }\n    /**\n    Test the error message to include a specific message.\n\n    @param message - Message that should be included in the error.\n    */\n    messageIncludes(message) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} message to include \\`${message}\\`, got \\`${error.message}\\``,\n            validator: error => error.message.includes(message)\n        });\n    }\n    /**\n    Test the error object to have specific keys.\n\n    @param keys - One or more keys which should be part of the error object.\n    */\n    hasKeys(...keys) {\n        return this.addValidator({\n            message: (_, label) => `Expected ${label} message to have keys \\`${keys.join('`, `')}\\``,\n            validator: error => keys.every(key => Object.prototype.hasOwnProperty.call(error, key))\n        });\n    }\n    /**\n    Test an error to be of a specific instance type.\n\n    @param instance - The expected instance type of the error.\n    */\n    instanceOf(instance) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} \\`${error.name}\\` to be of type \\`${instance.name}\\``,\n            validator: error => error instanceof instance\n        });\n    }\n    /**\n    Test an Error to be a TypeError.\n    */\n    get typeError() {\n        return this.instanceOf(TypeError);\n    }\n    /**\n    Test an Error to be an EvalError.\n    */\n    get evalError() {\n        return this.instanceOf(EvalError);\n    }\n    /**\n    Test an Error to be a RangeError.\n    */\n    get rangeError() {\n        return this.instanceOf(RangeError);\n    }\n    /**\n    Test an Error to be a ReferenceError.\n    */\n    get referenceError() {\n        return this.instanceOf(ReferenceError);\n    }\n    /**\n    Test an Error to be a SyntaxError.\n    */\n    get syntaxError() {\n        return this.instanceOf(SyntaxError);\n    }\n    /**\n    Test an Error to be a URIError.\n    */\n    get uriError() {\n        return this.instanceOf(URIError);\n    }\n}\nexports.ErrorPredicate = ErrorPredicate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}