{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/project/remora/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/project/remora/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/project/remora/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/project/remora/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayBufferPredicate = void 0;\nvar predicate_1 = require(\"./predicate\");\nvar ArrayBufferPredicate = /*#__PURE__*/function (_predicate_1$Predicat) {\n  _inherits(ArrayBufferPredicate, _predicate_1$Predicat);\n  var _super = _createSuper(ArrayBufferPredicate);\n  function ArrayBufferPredicate() {\n    _classCallCheck(this, ArrayBufferPredicate);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ArrayBufferPredicate, [{\n    key: \"byteLength\",\n    value:\n    /**\n    Test an array buffer to have a specific byte length.\n     @param byteLength - The byte length of the array buffer.\n    */\n    function byteLength(_byteLength) {\n      return this.addValidator({\n        message: function message(value, label) {\n          return \"Expected \".concat(label, \" to have byte length of `\").concat(_byteLength, \"`, got `\").concat(value.byteLength, \"`\");\n        },\n        validator: function validator(value) {\n          return value.byteLength === _byteLength;\n        }\n      });\n    }\n    /**\n    Test an array buffer to have a minimum byte length.\n     @param byteLength - The minimum byte length of the array buffer.\n    */\n  }, {\n    key: \"minByteLength\",\n    value: function minByteLength(byteLength) {\n      return this.addValidator({\n        message: function message(value, label) {\n          return \"Expected \".concat(label, \" to have a minimum byte length of `\").concat(byteLength, \"`, got `\").concat(value.byteLength, \"`\");\n        },\n        validator: function validator(value) {\n          return value.byteLength >= byteLength;\n        },\n        negatedMessage: function negatedMessage(value, label) {\n          return \"Expected \".concat(label, \" to have a maximum byte length of `\").concat(byteLength - 1, \"`, got `\").concat(value.byteLength, \"`\");\n        }\n      });\n    }\n    /**\n    Test an array buffer to have a minimum byte length.\n     @param length - The minimum byte length of the array buffer.\n    */\n  }, {\n    key: \"maxByteLength\",\n    value: function maxByteLength(byteLength) {\n      return this.addValidator({\n        message: function message(value, label) {\n          return \"Expected \".concat(label, \" to have a maximum byte length of `\").concat(byteLength, \"`, got `\").concat(value.byteLength, \"`\");\n        },\n        validator: function validator(value) {\n          return value.byteLength <= byteLength;\n        },\n        negatedMessage: function negatedMessage(value, label) {\n          return \"Expected \".concat(label, \" to have a minimum byte length of `\").concat(byteLength + 1, \"`, got `\").concat(value.byteLength, \"`\");\n        }\n      });\n    }\n  }]);\n  return ArrayBufferPredicate;\n}(predicate_1.Predicate);\nexports.ArrayBufferPredicate = ArrayBufferPredicate;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_inherits","_createSuper","Object","defineProperty","exports","value","ArrayBufferPredicate","predicate_1","_predicate_1$Predicat","_super","apply","arguments","key","byteLength","addValidator","message","label","concat","validator","minByteLength","negatedMessage","maxByteLength","Predicate"],"sources":["/project/remora/node_modules/ow/dist/predicates/array-buffer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayBufferPredicate = void 0;\nconst predicate_1 = require(\"./predicate\");\nclass ArrayBufferPredicate extends predicate_1.Predicate {\n    /**\n    Test an array buffer to have a specific byte length.\n\n    @param byteLength - The byte length of the array buffer.\n    */\n    byteLength(byteLength) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n            validator: value => value.byteLength === byteLength\n        });\n    }\n    /**\n    Test an array buffer to have a minimum byte length.\n\n    @param byteLength - The minimum byte length of the array buffer.\n    */\n    minByteLength(byteLength) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a minimum byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n            validator: value => value.byteLength >= byteLength,\n            negatedMessage: (value, label) => `Expected ${label} to have a maximum byte length of \\`${byteLength - 1}\\`, got \\`${value.byteLength}\\``\n        });\n    }\n    /**\n    Test an array buffer to have a minimum byte length.\n\n    @param length - The minimum byte length of the array buffer.\n    */\n    maxByteLength(byteLength) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a maximum byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n            validator: value => value.byteLength <= byteLength,\n            negatedMessage: (value, label) => `Expected ${label} to have a minimum byte length of \\`${byteLength + 1}\\`, got \\`${value.byteLength}\\``\n        });\n    }\n}\nexports.ArrayBufferPredicate = ArrayBufferPredicate;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,0EAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAF,OAAA,uEAAAC,OAAA;AAAA,IAAAE,SAAA,GAAAH,OAAA,oEAAAC,OAAA;AAAA,IAAAG,YAAA,GAAAJ,OAAA,uEAAAC,OAAA;AACbI,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAG,KAAK,CAAC;AACrC,IAAMC,WAAW,GAAGV,OAAO,CAAC,aAAa,CAAC;AAAC,IACrCS,oBAAoB,0BAAAE,qBAAA;EAAAR,SAAA,CAAAM,oBAAA,EAAAE,qBAAA;EAAA,IAAAC,MAAA,GAAAR,YAAA,CAAAK,oBAAA;EAAA,SAAAA,qBAAA;IAAAV,eAAA,OAAAU,oBAAA;IAAA,OAAAG,MAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAAZ,YAAA,CAAAO,oBAAA;IAAAM,GAAA;IAAAP,KAAA;IACtB;AACJ;AACA;AACA;IAEI,SAAAQ,WAAWA,WAAU,EAAE;MACnB,OAAO,IAAI,CAACC,YAAY,CAAC;QACrBC,OAAO,EAAE,SAAAA,QAACV,KAAK,EAAEW,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,+BAAAC,MAAA,CAA6BJ,WAAU,cAAAI,MAAA,CAAaZ,KAAK,CAACQ,UAAU;QAAA,CAAI;QACpHK,SAAS,EAAE,SAAAA,UAAAb,KAAK;UAAA,OAAIA,KAAK,CAACQ,UAAU,KAAKA,WAAU;QAAA;MACvD,CAAC,CAAC;IACN;IACA;AACJ;AACA;AACA;EAHI;IAAAD,GAAA;IAAAP,KAAA,EAKA,SAAAc,cAAcN,UAAU,EAAE;MACtB,OAAO,IAAI,CAACC,YAAY,CAAC;QACrBC,OAAO,EAAE,SAAAA,QAACV,KAAK,EAAEW,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,yCAAAC,MAAA,CAAuCJ,UAAU,cAAAI,MAAA,CAAaZ,KAAK,CAACQ,UAAU;QAAA,CAAI;QAC9HK,SAAS,EAAE,SAAAA,UAAAb,KAAK;UAAA,OAAIA,KAAK,CAACQ,UAAU,IAAIA,UAAU;QAAA;QAClDO,cAAc,EAAE,SAAAA,eAACf,KAAK,EAAEW,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,yCAAAC,MAAA,CAAuCJ,UAAU,GAAG,CAAC,cAAAI,MAAA,CAAaZ,KAAK,CAACQ,UAAU;QAAA;MACzI,CAAC,CAAC;IACN;IACA;AACJ;AACA;AACA;EAHI;IAAAD,GAAA;IAAAP,KAAA,EAKA,SAAAgB,cAAcR,UAAU,EAAE;MACtB,OAAO,IAAI,CAACC,YAAY,CAAC;QACrBC,OAAO,EAAE,SAAAA,QAACV,KAAK,EAAEW,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,yCAAAC,MAAA,CAAuCJ,UAAU,cAAAI,MAAA,CAAaZ,KAAK,CAACQ,UAAU;QAAA,CAAI;QAC9HK,SAAS,EAAE,SAAAA,UAAAb,KAAK;UAAA,OAAIA,KAAK,CAACQ,UAAU,IAAIA,UAAU;QAAA;QAClDO,cAAc,EAAE,SAAAA,eAACf,KAAK,EAAEW,KAAK;UAAA,mBAAAC,MAAA,CAAiBD,KAAK,yCAAAC,MAAA,CAAuCJ,UAAU,GAAG,CAAC,cAAAI,MAAA,CAAaZ,KAAK,CAACQ,UAAU;QAAA;MACzI,CAAC,CAAC;IACN;EAAC;EAAA,OAAAP,oBAAA;AAAA,EAnC8BC,WAAW,CAACe,SAAS;AAqCxDlB,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}